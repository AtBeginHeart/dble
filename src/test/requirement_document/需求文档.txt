背景：
核心银行发送交易信息到分片中间件，但是此时中间件停机了的情况下，数据丢失，交易失败。
（1.一般情况下可以人工走调账，但是有中间件，最好还是减少这个人工调账的过程比较好）

0.甲方提出需求或者现象。（在我的世界观里，现象是数据系统的）
DDF重启过程中立即停止，导致处理中的请求对视，事务未完成，出现核心系统交易失败（插入，但是还没有commit;）
执行停止脚本后，如果服务一直没有成功关闭，将导致不断有新的请求进入并被挂起，最终失败
1.系统调研与分析
判定系统和涉众，涉众可以是业务也可以是技术，
0.需要找到涉众，技术上的涉众基本上都是系统，以及对系统的操作(当前的技术系统是如何操作的需要进行调研)|本次应该讲涉众的粒度确定为实例
stakerholder:
客户端实例
服务端应用实例
--------------
其他术语
1.客户端
2.服务端
3.线程
2.乙方提出调研系统和项目提出解决方案形成解决方案文档（就是实现的设计）输出需求说明书
  1.生产环境自动化部署的时候，会出现上述的两种现象
  2.负载均衡处理器分发到已经中断的节点时
  3.DDF中间件自身的重启时会出现
  4.核心客户端持续发送到已经中断服务的节点。
3.实现
	1.生产环境自动化部署的时候，需要DDF支持滚动升级，但是对业务系统接近无影响，让业务系统无感知
	2.负载均衡组件能自动感知服务节点离线和上线，新请求不再分发到旧服务。
	3.DDF中间件系统发布重启过程中需要保证业务的连续性，让服务的客户端无感知，支持平滑发布。
	4.生产环境故障出现后，需要支持自我下线隔离，防止核心应用继续连接上来的DDF，影响核心交易成功率。
3.1 方案的细节
    需要实现三个层面的配合
	1.第一层，DDF要支持让F5自动感知服务节点离线和上线功能。
	2.第二层，DDF提供接口服务，让DDF离线或者上线。
	3.第三层，DDF实现优雅停机。
完成部署操作重启DDF，然后完成F5的自动上线注册，使升级后的DDF加入F5,完成上线。
4.DDF方案实现
	4.1DDF提供F5感知上线额下线的健康检查SQL
	  1.DDF内部提供一个服务状态：在线/离线
	  2.提供健康检查语句select status();支持查询在线状态
    4.2DDF提供命令语句支持上线和离线
	  DDF提供管理端命令: online;将DDF服务维护为上线状态
	  DDF提供管理端命令：offline;将DDF服务维护为离线状态
	4.3DDF管理端提供操作服务节点上线/离线
	 此阶段实现上述的抽象流程控制，包括
	 1.DDF管理端节点管理中提供DDF维护为上线状态按钮
	 2.DDF管理端节点管理中提供中提供将DDF维护为离线状态的按钮
	4.4 DDF支持优雅停机
	 1.DDF实现JDK提供了Java.Runtime.addShutdownHook(Theread hook)方法，注册一个JVM关闭的钩子。在以下几种场景中被调用
	  1.程序正常对出：这个正常对出是什么？
	  2.使用System.exit()
	  3.终端使用Ctrl+C触发的中断
	  4.系统关闭
	  5.OutOfMemory宕机
	  6.使用kill pid 干掉进程
	 
	 -----------------------------------------------------------------------------------------
	 个人对架构师和技术专家的定义，就是技术领域的需求分析师，就是技术领域产品产品规格说明书的书写者。
5.测试
仅仅测试现象，不测试其他的。