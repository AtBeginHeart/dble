@startuml

class contoxt
contoxt-->DbleStartup
DbleStartup--> ClusterController:init()初始化集群信息到内存
DbleStartup--> ZktoLocalMapMain:init() 初始化zk到本地映射初始化
DbleStartup-->SystemConfig:getHomePath()获取系统配置
DbleStartup--> DbleServer: getInstance()
DbleServer--> DbleServer:beforeStart()
DbleServer--> DtfClient:getInstance().startup();
DtfClient--> DtfClient:startup()
DbleServer--> DbleServer:startup()//启动dble-mycat
DbleServer --> DbleServer:backupLocked(原子备份锁，居然是一个bool类型的)
DbleServer --> DbleServer:managerConnectionFactory：管理端连接工厂
DbleServer --> DbleServer:serverConnectionFactory：服务端连接工程
DbleServer --> DbleServer:SocketAcceptor manager：管理端Socket接收器
DbleServer --> DbleServer:SocketAcceptor server： 服务端Socket接收器
DbleServer --> DbleServer:frontProcessors：前端NIO处理器
DbleServer --> DbleServer:backendProcessors:后端NIO处理器
DbleServer --> SystemConfig:getBufferPoolSize()
DbleServer --> SystemConfig:getBufferPoolChunkSize()
DbleServer -->DbleServer:totalNetWorkBufferSize//网络连接内存容量
DbleServer -->DirectByteBufferPool: new //建立直接缓存区
DbleServer-->ExecutorUtil:创建业务执行器
DbleServer-->ExecutorUtil:创建管理执行器
DbleServer-->ExecutorUtil:jdbcBackendBusinessBusinessExecutor
DbleServer-->ExecutorUtil:ddfletExecutor
DbleServer-->ExecutorUtil:writeToBackendExecutor
DbleServer-->ExecutorUtil:writeToBackendExecutor
DbleServer-->ExecutorUtil:timerExecutor执行器
DbleServer-->ExecutorUtil:complexQueryExecutor cache
DbleServer-->LinkedBlockingQueue:创建连接锁队列
DbleServer-->writeToBackendExecutor:execute(将连接锁队列引用给该执行器)
DbleServer-->DbleServer: writeToBackendExecutor遍历WriteToBackenQueue队列
DbleServer-->DbleServer: 遍历前端处理器
DbleServer-->DbleServer: 遍历后端处理器
DbleServer-->DbleServer: 新建NIOReactorPool 前端响应连接池
DbleServer-->DbleServer: 新建NIOReactorPool 后端响应端连接池
DbleServer-->DbleServer: 新建NIOConnector 连接者并启动
DbleServer-->DbleServer: 新建管理端NIOAcceptor
DbleServer-->DbleServer: 新建服务端NIOAcceptor



@enduml